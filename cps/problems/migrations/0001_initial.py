# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-03 08:14
from __future__ import unicode_literals

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import version_control.classes


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('file_repository', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='file_repository.File', verbose_name='file')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='text')),
                ('posting_date', models.DateTimeField(auto_now_add=True, verbose_name='posting date')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_name', models.CharField(db_index=True, max_length=150, verbose_name='code name')),
                ('title', models.CharField(max_length=150, verbose_name='title')),
                ('task_type', models.CharField(max_length=150, verbose_name='task type')),
                ('task_type_parameters', models.TextField(verbose_name='task type parameters')),
                ('score_type', models.CharField(max_length=150, verbose_name='score type')),
                ('score_type_parameters', models.TextField(verbose_name='score type parameters')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='ProblemRevision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depth', models.IntegerField(verbose_name='revision depth')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='revision owner')),
                ('parent_revision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision', verbose_name='parent revision')),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='problems.Problem', verbose_name='problem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='SolutionSubtaskScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(verbose_name='score')),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.Solution', verbose_name='solution')),
            ],
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='SolutionTestScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(verbose_name='score')),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.Solution', verbose_name='solution')),
            ],
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='SourceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_language', models.CharField(max_length=200, null=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='file_repository.File', verbose_name='file')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision', verbose_name='problem')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='Subtask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('score', models.IntegerField(verbose_name='score')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='problems.ProblemRevision', verbose_name='problem')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='name')),
                ('_input_generation_command', models.TextField(blank=True, max_length=1, null=True, verbose_name='input generation command')),
                ('_input_static', models.BooleanField(editable=False)),
                ('_output_static', models.BooleanField(editable=False)),
                ('_input_file', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='file_repository.File')),
                ('_input_uploaded_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='file_repository.File', verbose_name='input uploaded file')),
                ('_output_file', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='file_repository.File')),
                ('_output_uploaded_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='file_repository.File', verbose_name='input file')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision', verbose_name='problem')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.CreateModel(
            name='Validator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_validate_all_subtasks', models.BooleanField(help_text='if marked, it validates all subtasks', verbose_name='all subtasks')),
                ('_subtasks', models.ManyToManyField(to='problems.Subtask', verbose_name='subtasks')),
                ('code', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='problems.SourceFile', verbose_name='source code')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision', verbose_name='problem')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, version_control.classes.Version),
        ),
        migrations.AddField(
            model_name='subtask',
            name='testcases',
            field=models.ManyToManyField(related_name='subtasks', to='problems.TestCase'),
        ),
        migrations.AddField(
            model_name='solutiontestscore',
            name='testcase',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.TestCase', verbose_name='testcase'),
        ),
        migrations.AddField(
            model_name='solutionsubtaskscore',
            name='subtask',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.Subtask', verbose_name='subtask'),
        ),
        migrations.AddField(
            model_name='solution',
            name='code',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='problems.SourceFile', verbose_name='code'),
        ),
        migrations.AddField(
            model_name='solution',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='solution',
            name='subtask_scores',
            field=models.ManyToManyField(through='problems.SolutionSubtaskScore', to='problems.Subtask'),
        ),
        migrations.AddField(
            model_name='solution',
            name='tests_scores',
            field=models.ManyToManyField(through='problems.SolutionTestScore', to='problems.TestCase'),
        ),
        migrations.AddField(
            model_name='problemdata',
            name='checker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.SourceFile', verbose_name='checker'),
        ),
        migrations.AddField(
            model_name='problemdata',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision'),
        ),
        migrations.AddField(
            model_name='problem',
            name='master_revision',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='problems.ProblemRevision', verbose_name='master revision'),
        ),
        migrations.AddField(
            model_name='comment',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.Problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.ProblemRevision', verbose_name='problem'),
        ),
        migrations.AlterUniqueTogether(
            name='solutiontestscore',
            unique_together=set([('solution', 'testcase')]),
        ),
        migrations.AlterUniqueTogether(
            name='solutionsubtaskscore',
            unique_together=set([('solution', 'subtask')]),
        ),
    ]
